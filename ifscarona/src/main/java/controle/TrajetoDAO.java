package controle;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import modelo.ITrajetoDAO;
import modelo.Trajeto;

public class TrajetoDAO implements ITrajetoDAO {

	private static TrajetoDAO instancia;

	private TrajetoDAO() {

	}

	public static TrajetoDAO getInstancia() {
		if (instancia == null) {
			instancia = new TrajetoDAO();
		}
		return instancia;
	}

	@Override
	public boolean cadastrarTrajeto(Trajeto trajeto) {
	    if (trajeto != null) {
	        ConexaoBanco c = ConexaoBanco.getInstancia();
	        Connection con = c.conectar();

	        String query = "INSERT INTO trajetos (origem, destino) VALUES (?, ?)";

	        try {
	            PreparedStatement ps = con.prepareStatement(query);

	            ps.setString(1, trajeto.getOrigem());
	            ps.setString(2, trajeto.getDestino());

	            int rowsAffected = ps.executeUpdate();

	            if (rowsAffected > 0) {
	                return true;
	            }
	            ResultSet res = ps.getGeneratedKeys();
	            System.out.println("Auto-incremented values of the column ID generated by the current PreparedStatement object: ");
	            while (res.next()) {
	               System.out.println(res.getString(1));
	            }

	        } catch (SQLException e) {
	            e.printStackTrace();
	        } finally {
	            c.fecharConexao();
	        }
	    }
	    return false;
	}



	@Override
	public boolean alterarTrajeto(Trajeto trajeto) {

		if (trajeto != null) {
			ConexaoBanco c = ConexaoBanco.getInstancia();
			Connection con = c.conectar();

			String query = "UPDATE trajetos SET origem = ?, destino = ? WHERE id_trajeto = ?";

			try {
				PreparedStatement ps = con.prepareStatement(query);
				ps.setString(1, trajeto.getOrigem());
				ps.setString(2, trajeto.getDestino());
				ps.setInt(3, trajeto.getIdTrajeto());

				ps.executeUpdate();

				return true;

			} catch (SQLException e) {

				e.printStackTrace();
			} finally {

				c.fecharConexao();
			}
		}
		return false;
	}

	@Override
	public boolean deletarTrajeto(Trajeto trajeto) {
		if (trajeto != null) {
			ConexaoBanco c = ConexaoBanco.getInstancia();

			Connection con = c.conectar();

			String query = "DELETE FROM trajetos WHERE id_trajeto = ?";

			try {
				PreparedStatement ps = con.prepareStatement(query);
				ps.setInt(1, trajeto.getIdTrajeto());
				ps.setString(1, trajeto.getOrigem());
				ps.setString(1, trajeto.getDestino());
				ps.executeUpdate();

				c.fecharConexao();

				return true;

			} catch (SQLException e) {
				e.printStackTrace();
			} finally {

				c.fecharConexao();
			}
		}
		return false;
	}

	public ArrayList<Trajeto> listarTrajetos() {

		ConexaoBanco c = ConexaoBanco.getInstancia();

		Connection con = c.conectar();

		ArrayList<Trajeto> trajetos = new ArrayList<>();

		String query = "SELECT * FROM trajetos";

		try {
			PreparedStatement tj = con.prepareStatement(query);

			ResultSet rs = tj.executeQuery();

			while (rs.next()) {

				Integer idTrajeto = rs.getInt("id_trajeto");
				String origem = rs.getString("origem");
				String destino = rs.getString("destino");

				Trajeto t = new Trajeto();
				t.setIdTrajeto(idTrajeto);
				t.setOrigem(origem);
				t.setDestino(destino);

				trajetos.add(t);
			}

		} catch (SQLException e) {

			e.printStackTrace();

		} finally {

			c.fecharConexao();
		}

		return trajetos;
	}
}
